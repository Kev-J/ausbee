config TOOLCHAIN_TARGET_NAME
	string "Target name"
	default "arm-none-eabi"
	help
		TODO

config DOWNLOAD_TOOLCHAIN
    bool "Download GCC ARM embedded toolchain"
    default y
    help
        TODO

config TOOLCHAIN_MIRROR
    string "Toolchain mirror URL"
    default "https://launchpad.net/gcc-arm-embedded/4.7/4.7-2013-q3-update/+download/gcc-arm-none-eabi-4_7-2013q3-20130916-linux.tar.bz2"
    help
        TODO

config TOOLCHAIN_BIN_PATH
	string "Toolchain /bin path"
	help
		TODO
        depends on !DOWNLOAD_TOOLCHAIN

comment "GCC/G++ options"

# -ffunction-sections and -fdata-sections will tell to gcc to put functions and data in special .text sections.
# This enable the linker to optimize unused functions and data thanks to -Wl,-gc-sections flag.
#
# Add -mthumb-interwork for enabling ARM and Thumb interwork
config TOOLCHAIN_COMMON_FLAGS
    string "Common flags (CFLAGS and LDFLAGS)"
    default "-Wall -Wextra -ffunction-sections -fdata-sections"
    help
        -mthumb -mcpu=cortex-mX and -DDEVICE_NAME will be automatically added according to the selected CPU.
        -DUSE_STDPERIPH_DRIVER will be automatically added according to your choice of including it or not.

config TOOLCHAIN_CFLAGS
    string "Toolchain CFLAGS"
    default ""
    help
	TODO

# -fno-rtti disable RunTime Type Informations
# -fno-exceptions disable exceptions
# These two C++ particularities include two much functions overhead
# In a result, you won't be able to use exceptions handling and dynamic casts
config TOOLCHAIN_CXXFLAGS
    string "Toolchain CXXFLAGS"
    default "-fno-rtti -fno-exceptions"
    help
	TODO

# -Wl,--gc-sections will remove unused functions and datas thanks to -ffunction-sections and -fdata-sections
# -nostartfiles do not use standard system startup files when linking
config TOOLCHAIN_LDFLAGS
    string "Toolchain LDFLAGS"
    default "-Wl,--gc-sections -nostartfiles"
    help
        TODO

config OPTIMISATION
    string "Optimisation"
    default "s"
    help
        TODO

